name: AT-AT-Manual-Docker-Build

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to run against"
        type: environment
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  terraform-plan:
    runs-on: ubuntu-latest

    environment:
      name: ${{ github.event.inputs.environment }}

    steps:
      - uses: actions/checkout@v3

      - name: "Az CLI login"
        uses: azure/login@v2
        with:
          client-id: ${{ vars.TERRAFORM_ARM_CLIENT_ID }}
          tenant-id: ${{ vars.ARM_TENANT_ID }}
          subscription-id: ${{ vars.ARM_SUBSCRIPTION_ID }}

      - id: setup
        name: Setup `terraform`
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ vars.TERRAFORM_VERSION }}

      - id: validate
        name: Terraform Validate
        env:
          ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ vars.TERRAFORM_ARM_CLIENT_ID }}
          ARM_USE_OIDC: true
          TF_VAR_application_name: ${{ vars.APPLICATION_NAME }}
          TF_VAR_environment_name: ${{ vars.ENVIRONMENT_NAME }}
        working-directory: ${{ vars.TERRAFORM_WORKING_DIRECTORY }}
        run: |
          export ARM_OID_REQUEST_TOKEN=$ACTIONS_ID_TOKEN_REQUEST_TOKEN

          terraform init \
            -backend-config="resource_group_name=${{ vars.BACKEND_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ vars.BACKEND_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ vars.BACKEND_STORAGE_STATE_CONTAINER_NAME }}" \
            -backend-config="key=${{ vars.APPLICATION_NAME }}-${{ vars.ENVIRONMENT_NAME }}"
            
          terraform validate

      - id: plan
        name: Terraform Plan
        env:
          ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ vars.TERRAFORM_ARM_CLIENT_ID }}
          ARM_USE_OIDC: true
          TF_VAR_application_name: ${{ vars.APPLICATION_NAME }}
          TF_VAR_environment_name: ${{ vars.ENVIRONMENT_NAME }}
        working-directory: ${{ vars.TERRAFORM_WORKING_DIRECTORY }}
        run: |
          export ARM_OID_REQUEST_TOKEN=$ACTIONS_ID_TOKEN_REQUEST_TOKEN

          terraform init \
            -backend-config="resource_group_name=${{ vars.BACKEND_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ vars.BACKEND_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ vars.BACKEND_STORAGE_STATE_CONTAINER_NAME }}" \
            -backend-config="key=${{ vars.APPLICATION_NAME }}-${{ vars.ENVIRONMENT_NAME }}"
            
          terraform plan -out=terraform-plan-${{ github.run_id }}.tfplan

      - name: Upload Plan to Azure Storage
        working-directory: ${{ vars.TERRAFORM_WORKING_DIRECTORY }}
        run: |
          az storage blob upload \
            --account-name ${{ vars.BACKEND_STORAGE_ACCOUNT_NAME }} \
            --container-name ${{ vars.BACKEND_STORAGE_PLAN_CONTAINER_NAME }} \
            --name terraform-plan-${{ github.run_id }}.tfplan \
            --file terraform-plan-${{ github.run_id }}.tfplan

  terraform-apply:
    needs: terraform-plan
    runs-on: ubuntu-latest
    outputs:
      container_registry_endpoint: ${{ steps.apply.outputs.container_registry_endpoint }}
      resource_group_name: ${{ steps.apply.outputs.resource_group_name }}

    environment:
      name: ${{ github.event.inputs.environment }}

    steps:
      - uses: actions/checkout@v3

      - name: "Az CLI login"
        uses: azure/login@v2
        with:
          client-id: ${{ vars.TERRAFORM_ARM_CLIENT_ID }}
          tenant-id: ${{ vars.ARM_TENANT_ID }}
          subscription-id: ${{ vars.ARM_SUBSCRIPTION_ID }}

      - id: setup
        name: Setup `terraform`
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ vars.TERRAFORM_VERSION }}

      - name: Download Plan from Azure Storage
        working-directory: ${{ vars.TERRAFORM_WORKING_DIRECTORY }}
        run: |
          az storage blob download \
            --account-name ${{ vars.BACKEND_STORAGE_ACCOUNT_NAME }} \
            --container-name ${{ vars.BACKEND_STORAGE_PLAN_CONTAINER_NAME }} \
            --name terraform-plan-${{ github.run_id }}.tfplan \
            --file terraform-plan-${{ github.run_id }}.tfplan

      - id: apply
        name: Terraform Apply
        env:
          ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ vars.TERRAFORM_ARM_CLIENT_ID }}
          ARM_USE_OIDC: true
          TF_VAR_application_name: ${{ vars.APPLICATION_NAME }}
          TF_VAR_environment_name: ${{ vars.ENVIRONMENT_NAME }}
        working-directory: ${{ vars.TERRAFORM_WORKING_DIRECTORY }}
        run: |
          export ARM_OID_REQUEST_TOKEN=$ACTIONS_ID_TOKEN_REQUEST_TOKEN

          terraform init \
            -backend-config="resource_group_name=${{ vars.BACKEND_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ vars.BACKEND_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ vars.BACKEND_STORAGE_STATE_CONTAINER_NAME }}" \
            -backend-config="key=${{ vars.APPLICATION_NAME }}-${{ vars.ENVIRONMENT_NAME }}"

          terraform apply terraform-plan-${{ github.run_id }}.tfplan

          resource_group_name=$(terraform output -raw resource_group_name)
          echo $resource_group_name
          echo "resource_group_name=$resource_group_name" >> "$GITHUB_OUTPUT"

          function_name=$(terraform output -raw container_registry_endpoint)
          echo $container_registry_endpoint
          echo "container_registry_endpoint=$container_registry_endpoint" >> "$GITHUB_OUTPUT"

  docker-build:
    needs: [terraform-apply]
    runs-on: ubuntu-latest

    environment:
      name: ${{ github.event.inputs.environment }}

    steps:
      - uses: actions/checkout@v3

      - id: image-version
        name: Generate Version Number
        run: |
          echo "version=$(date +'%Y.%m').${{ github.run_number }}" >> "$GITHUB_OUTPUT"

      - name: "Az CLI login"
        uses: azure/login@v2
        with:
          client-id: ${{ vars.TERRAFORM_ARM_CLIENT_ID }}
          tenant-id: ${{ vars.ARM_TENANT_ID }}
          subscription-id: ${{ vars.ARM_SUBSCRIPTION_ID }}

      - name: Build Docker Image
        working-directory: src/docker/github-actions-runner
        env:
          GITHUB_PAT: ${{ secrets.GITHUB_PAT }}
          CONTAINER_REGISTRY_NAME: :${{ steps.terraform-apply.outputs.container_registry_endpoint }}
          CONTAINER_IMAGE_NAME: github-runner:${{ steps.image-version.outputs.version }}
        run: |
          az acr build \
            --registry "$CONTAINER_REGISTRY_NAME" \
            --image "$CONTAINER_IMAGE_NAME" \
            --file "Dockerfile.github" \
            "https://github.com/Azure-Samples/container-apps-ci-cd-runner-tutorial.git"
